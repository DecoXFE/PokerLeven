[manifest]
version = "1.0.0"
dump_lua = true
priority = 3

## Custom Small/Big Blinds
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.GAME.round_resets.blind_choices.Boss = get_new_boss()'''
position = 'before'
match_indent = true
payload = '''
G.GAME.round_resets.blind_choices.Small = get_new_small()
G.GAME.round_resets.blind_choices.Big = get_new_big()
'''

# Add Custom Small/Big Blinds
[[patches]]
[patches.pattern]
target = 'game.lua'
match_indent = true
position = 'before'
pattern = '''
self.GAME.round_resets.blind_choices.Boss = get_new_boss()
'''
payload = '''
self.GAME.round_resets.blind_choices.Small = get_new_small()
self.GAME.round_resets.blind_choices.Big = get_new_big()
'''

# Handle defeating custom small/big blinds
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.round_resets.blind_states.Big = 'Defeated'"
position = 'after'
match_indent = true
payload = '''
elseif G.GAME.round_resets.blind.small then
    G.GAME.round_resets.blind_states.Small = 'Defeated'
elseif G.GAME.round_resets.blind.big then
    G.GAME.round_resets.blind_states.Big = 'Defeated'
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "delay(0.4); ease_ante(1); delay(0.4); check_for_unlock({type = 'ante_up', ante = G.GAME.round_resets.ante + 1})"
position = 'at'
match_indent = true
override = true
payload = '''
if not G.GAME.blind.small and not G.GAME.blind.big then
    delay(0.4)
    ease_ante(1)
    delay(0.4)
    check_for_unlock({type = 'ante_up', ante = G.GAME.round_resets.ante + 1})
end
'''

# Handle setting new blinds
[[patches]]
[patches.pattern]
target = 'blind.lua'
match_indent = true
position = 'after'
pattern = '''
self.boss = blind and not not blind.boss
'''
payload = '''
self.small = blind and not not blind.small
self.big = blind and not not blind.big
'''

# blind ingame UI
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''if obj.loc_vars and type(obj.loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = obj.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''local res = obj:loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or obj.key
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = self.config.blind.key, set = 'Blind', vars = loc_vars or self.config.blind.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or self.config.vars}
'''
match_indent = true

# blind select UI
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if obj.loc_vars and _G['type'](obj.loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = obj.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local res = obj:loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or obj.key
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = blind_choice.config.key, set = 'Blind', vars = loc_vars or blind_choice.config.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or blind_choice.config.vars}
'''
match_indent = true
# blind collection UI
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if blind.collection_loc_vars and type(blind.collection_loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = blind.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local res = blind:collection_loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or blind.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = blind.key, set = 'Blind', vars = loc_vars or vars or blind.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or blind.vars}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if v.boss.showdown then '''
position = "at"
payload = '''if v.boss and v.boss.showdown then '''
match_indent = true