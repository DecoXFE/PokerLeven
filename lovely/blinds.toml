[manifest]
version = "1.0.0"
dump_lua = true
priority = 3

## Custom bosses only
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if eligible_bosses[k] then
            if eligible_bosses[k] > min_use then '''
position = 'at'
match_indent = true
payload = '''
if eligible_bosses[k] then
    local is_mod = G.P_BLINDS[k].mod and G.P_BLINDS[k].mod.id == 'Pokerleven'
    if Pokerleven.config.custom_middle_blinds == true then
        if not is_mod then
            eligible_bosses[k] = nil
        end
elseif eligible_bosses[k] > min_use then
'''


[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''G.DISCOVER_TALLIES.total.of = G.DISCOVER_TALLIES.total.of+1
      G.DISCOVER_TALLIES.blinds.of = G.DISCOVER_TALLIES.blinds.of+1
      if v.discovered then 
          G.DISCOVER_TALLIES.blinds.tally = G.DISCOVER_TALLIES.blinds.tally+1
          G.DISCOVER_TALLIES.total.tally = G.DISCOVER_TALLIES.total.tally+1
      end'''
position = 'at'
match_indent = true
payload = '''
local is_mod = v.mod and (v.mod.id == 'Pokerleven' or v.mod.id == 'Multiplayer')
if is_mod then
    G.DISCOVER_TALLIES.total.of = G.DISCOVER_TALLIES.total.of+1
    G.DISCOVER_TALLIES.blinds.of = G.DISCOVER_TALLIES.blinds.of+1
    if v.discovered then 
        G.DISCOVER_TALLIES.blinds.tally = G.DISCOVER_TALLIES.blinds.tally+1
        G.DISCOVER_TALLIES.total.tally = G.DISCOVER_TALLIES.total.tally+1
    end
end
'''

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''blind_tab[#blind_tab+1] = v'''
position = 'at'
match_indent = true
payload = '''
local is_mod = v.mod and v.mod.id == 'Pokerleven'
if is_mod then
    blind_tab[#blind_tab + 1] = v
end
'''

## Custom Small/Big Blinds
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.GAME.round_resets.blind_choices.Boss = get_new_boss()'''
position = 'before'
match_indent = true
payload = '''
G.GAME.round_resets.blind_choices.Small = get_new_small()
G.GAME.round_resets.blind_choices.Big = get_new_big()
'''

# Add Custom Small/Big Blinds
[[patches]]
[patches.pattern]
target = 'game.lua'
match_indent = true
position = 'before'
pattern = '''
self.GAME.round_resets.blind_choices.Boss = get_new_boss()
'''
payload = '''
self.GAME.round_resets.blind_choices.Small = get_new_small()
self.GAME.round_resets.blind_choices.Big = get_new_big()
'''

# Handle defeating custom small/big blinds
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.round_resets.blind_states.Big = 'Defeated'"
position = 'after'
match_indent = true
payload = '''
elseif G.GAME.round_resets.blind.small then
    G.GAME.round_resets.blind_states.Small = 'Defeated'
elseif G.GAME.round_resets.blind.big then
    G.GAME.round_resets.blind_states.Big = 'Defeated'
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.round_resets.blind_states.Boss = 'Defeated'"
position = 'after'
match_indent = true
payload = '''
if #find_player_team(G.GAME.blind.name) > 0 then
        check_for_unlock({type = "ex_law"})
end
'''


# Handle setting new blinds
[[patches]]
[patches.pattern]
target = 'blind.lua'
match_indent = true
position = 'after'
pattern = '''
self.boss = blind and not not blind.boss
'''
payload = '''
self.small = blind and not not blind.small
self.big = blind and not not blind.big
'''

# blind ingame UI
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''if obj.loc_vars and type(obj.loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = obj.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''local res = obj:loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or obj.key
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = self.config.blind.key, set = 'Blind', vars = loc_vars or self.config.blind.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or self.config.vars}
'''
match_indent = true

# blind select UI
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if obj.loc_vars and _G['type'](obj.loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = obj.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local res = obj:loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or obj.key
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = blind_choice.config.key, set = 'Blind', vars = loc_vars or blind_choice.config.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or blind_choice.config.vars}
'''
match_indent = true

# blind collection UI
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if blind.collection_loc_vars and type(blind.collection_loc_vars) == 'function' then'''
position = "before"
payload = '''
local loc_key = blind.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local res = blind:collection_loc_vars() or {}'''
position = "after"
payload = '''
loc_key = res.key or blind.key
'''
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local loc_target = localize{type = 'raw_descriptions', key = blind.key, set = 'Blind', vars = loc_vars or vars or blind.vars}'''
position = "at"
payload = '''
local loc_target = localize{type = 'raw_descriptions', key = loc_key, set = 'Blind', vars = loc_vars or vars or blind.vars}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if v.boss.showdown then '''
position = "at"
payload = '''if v.boss and v.boss.showdown then '''
match_indent = true
